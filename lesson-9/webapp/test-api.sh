#!/bin/bash

# API Testing Script for Manual Verification
set -e

API_URL="${1:-http://localhost:3000}"
echo "üß™ Testing DevOps Demo API at: $API_URL"
echo "============================================"

# Test 1: Health Check
echo ""
echo "1Ô∏è‚É£  Testing Health Endpoint..."
HEALTH_RESPONSE=$(curl -s "$API_URL/health")
if echo "$HEALTH_RESPONSE" | grep -q "healthy"; then
    echo "‚úÖ Health check passed"
else
    echo "‚ùå Health check failed"
    echo "Response: $HEALTH_RESPONSE"
fi

# Test 2: API Root
echo ""
echo "2Ô∏è‚É£  Testing API Root..."
ROOT_RESPONSE=$(curl -s "$API_URL/")
if echo "$ROOT_RESPONSE" | grep -q "DevOps Demo API"; then
    echo "‚úÖ API root endpoint working"
else
    echo "‚ùå API root endpoint failed"
    echo "Response: $ROOT_RESPONSE"
fi

# Test 3: Get Users
echo ""
echo "3Ô∏è‚É£  Testing Get Users..."
USERS_RESPONSE=$(curl -s "$API_URL/api/users")
if echo "$USERS_RESPONSE" | grep -q "users"; then
    echo "‚úÖ Get users endpoint working"
    USER_COUNT=$(echo "$USERS_RESPONSE" | grep -o '"count":[0-9]*' | cut -d':' -f2)
    echo "   üìä Current user count: $USER_COUNT"
else
    echo "‚ùå Get users endpoint failed"
    echo "Response: $USERS_RESPONSE"
fi

# Test 4: Create User
echo ""
echo "4Ô∏è‚É£  Testing Create User..."
NEW_USER_DATA='{"name":"Test User","email":"test@example.com"}'
CREATE_RESPONSE=$(curl -s -X POST -H "Content-Type: application/json" -d "$NEW_USER_DATA" "$API_URL/api/users")

if echo "$CREATE_RESPONSE" | grep -q '"id"'; then
    echo "‚úÖ Create user endpoint working"
    USER_ID=$(echo "$CREATE_RESPONSE" | grep -o '"id":[0-9]*' | cut -d':' -f2)
    echo "   üÜî Created user ID: $USER_ID"
    
    # Test 5: Get Specific User
    echo ""
    echo "5Ô∏è‚É£  Testing Get Specific User..."
    GET_USER_RESPONSE=$(curl -s "$API_URL/api/users/$USER_ID")
    if echo "$GET_USER_RESPONSE" | grep -q "Test User"; then
        echo "‚úÖ Get specific user endpoint working"
    else
        echo "‚ùå Get specific user endpoint failed"
        echo "Response: $GET_USER_RESPONSE"
    fi
    
    # Test 6: Update User
    echo ""
    echo "6Ô∏è‚É£  Testing Update User..."
    UPDATE_DATA='{"name":"Updated Test User","active":false}'
    UPDATE_RESPONSE=$(curl -s -X PUT -H "Content-Type: application/json" -d "$UPDATE_DATA" "$API_URL/api/users/$USER_ID")
    if echo "$UPDATE_RESPONSE" | grep -q "Updated Test User"; then
        echo "‚úÖ Update user endpoint working"
    else
        echo "‚ùå Update user endpoint failed"
        echo "Response: $UPDATE_RESPONSE"
    fi
    
    # Test 7: Delete User
    echo ""
    echo "7Ô∏è‚É£  Testing Delete User..."
    DELETE_RESPONSE=$(curl -s -X DELETE "$API_URL/api/users/$USER_ID" -w "%{http_code}")
    if [[ "$DELETE_RESPONSE" == "204" ]]; then
        echo "‚úÖ Delete user endpoint working"
    else
        echo "‚ùå Delete user endpoint failed"
        echo "Response code: $DELETE_RESPONSE"
    fi
    
    # Test 8: Verify Deletion
    echo ""
    echo "8Ô∏è‚É£  Verifying User Deletion..."
    VERIFY_DELETE=$(curl -s "$API_URL/api/users/$USER_ID" -w "%{http_code}")
    if [[ "$VERIFY_DELETE" == *"404" ]]; then
        echo "‚úÖ User successfully deleted"
    else
        echo "‚ùå User deletion verification failed"
        echo "Response: $VERIFY_DELETE"
    fi
    
else
    echo "‚ùå Create user endpoint failed"
    echo "Response: $CREATE_RESPONSE"
fi

# Test 9: Error Handling
echo ""
echo "9Ô∏è‚É£  Testing Error Handling..."
ERROR_RESPONSE=$(curl -s "$API_URL/api/nonexistent" -w "%{http_code}")
if [[ "$ERROR_RESPONSE" == *"404" ]]; then
    echo "‚úÖ 404 error handling working"
else
    echo "‚ùå 404 error handling failed"
    echo "Response: $ERROR_RESPONSE"
fi

# Test 10: Filter Users
echo ""
echo "üîü Testing User Filtering..."
FILTER_RESPONSE=$(curl -s "$API_URL/api/users?active=true")
if echo "$FILTER_RESPONSE" | grep -q "users"; then
    echo "‚úÖ User filtering working"
    ACTIVE_COUNT=$(echo "$FILTER_RESPONSE" | grep -o '"count":[0-9]*' | cut -d':' -f2)
    echo "   üìä Active users count: $ACTIVE_COUNT"
else
    echo "‚ùå User filtering failed"
    echo "Response: $FILTER_RESPONSE"
fi

echo ""
echo "üéâ API testing complete!"
echo ""
echo "üí° Usage examples:"
echo "   ‚Ä¢ Health check: curl $API_URL/health"
echo "   ‚Ä¢ List users: curl $API_URL/api/users"
echo "   ‚Ä¢ Create user: curl -X POST -H 'Content-Type: application/json' -d '{\"name\":\"John\",\"email\":\"john@test.com\"}' $API_URL/api/users"
echo "   ‚Ä¢ Get user: curl $API_URL/api/users/1"
echo "   ‚Ä¢ Update user: curl -X PUT -H 'Content-Type: application/json' -d '{\"name\":\"Updated\"}' $API_URL/api/users/1"
echo "   ‚Ä¢ Delete user: curl -X DELETE $API_URL/api/users/1"
