# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: DevOps Course Pipeline
env:
  default-branch: main
  python-version: "3.10"
  LESSON: "lesson4"

on: 
  push:
  workflow_dispatch:
      inputs:
        lesson:
          description: 'Select the lesson to run'
          required: true
          default: 'lesson2'
          type: choice
          options:
            - lesson2
            - lesson4
            - lesson5
            - lesson8
# inputs:
#     name:
#       type: choice
#       description: Who to greet
#       options: 
#       - monalisa
#       - cschleiden
# on:
#   push:
#     branches: [ $default-branch ]
#   pull_request:
#     branches: [ $default-branch ]
# 
permissions:
  contents: read

jobs:

  "lesson2":
    if: ${{ github.event.inputs.lesson == 'lesson2' }}

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.13
      uses: actions/setup-python@v3
      with:
        python-version: 3.13
    - name: Install dependencies
      #if: ${{ env.LESSON == 'lesson2' }}

      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        pytest

  "lesson4":
    if: ${{ github.event.inputs.lesson == 'lesson4' }}

    runs-on: ubuntu-latest
    environment: dev
    # run terraform in lesson-4/live-demo directory
    # defaults:
    #   run: cd lesson-4/live-demo
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4.1.0
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-central-1

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with: 
        terraform_version: "1.11.1"

    - name: Terraform plan and apply
      working-directory: lesson-4/live-demo
      env:
        TF_VAR_aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
        TF_VAR_aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_aws_region: eu-central-1
        TF_IN_AUTOMATION: true
        TF_INPUT: false
        TF_WORKSPACE: dev
      run: |
        terraform init
        terraform plan -no-color
        terraform apply -auto-approve -no-color
        
  "lesson5":
    if: ${{ github.event.inputs.lesson == 'lesson5' }}

    runs-on: ubuntu-latest
    environment: dev
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: lesson-5
        tags: demoapp:latest


  "lesson8":
    if: ${{ github.event.inputs.lesson == 'lesson8' }}

    runs-on: ubuntu-latest
    environment: dev
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with: 
        terraform_version: "1.11.1"      
    - name: Terraform create ecr repository
      working-directory: lesson-8/terraform/
      env:
        TF_VAR_aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
        TF_VAR_aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_aws_region: ${{ vars.AWS_REGION }}
        TF_IN_AUTOMATION: true
        TF_INPUT: false
        TF_CLI_ARGS_plan: -target=aws_ecr_repository.mynginx
        TF_WORKSPACE: dev
      run: |
        terraform init
        terraform plan -no-color
        terraform apply -auto-approve -no-color        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Login to ECR
      uses: docker/login-action@v3
      with:
        registry: ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com
        username: ${{ secrets.AWS_ACCESS_KEY_ID }}
        password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}      
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: lesson-8/docker/
        tags: ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/mynginx:latest
    - name: Terraform deploy
      working-directory: lesson-8/terraform/
      env:
        TF_VAR_aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
        TF_VAR_aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_aws_region: ${{ vars.AWS_REGION }}
        TF_IN_AUTOMATION: true
        TF_INPUT: false
        TF_WORKSPACE: dev
      run: |
        terraform init
        terraform plan -no-color
        terraform apply -auto-approve -no-color        
        
    # - name: Run Docker container test
    #   run: |
    #     docker run --rm --name demoapp  demoapp:latest python python -m unittest discover -s demoapp/tests

    # - run: terraform init
    #   working-directory: lesson-4/live-demo

    # - id: plan
    #   run: terraform plan -no-color
    #   working-directory: lesson-4/live-demo

    # - run: echo ${{ steps.plan.outputs.stdout }}
    # - run: echo ${{ steps.plan.outputs.stderr }}
    # - run: echo ${{ steps.plan.outputs.exitcode }}   
    
    # - id: apply
 
    #   if: ${{ env.LESSON == 'lesson4' }}
    #   working-directory: lesson-4/live-demo
    #   run: terraform apply -auto-approve -no-color
    # - run: echo ${{ steps.apply.outputs.stdout }}
  # validate:
  #   runs-on: ubuntu-latest

  #   steps:
  #   - uses: actions/checkout@v4
  #   - name: Set up Python 3.10
  #     uses: actions/setup-python@v3
  #     with:
  #       python-version: "3.10"
  #   - name: Install dependencies
  #     run: |
  #       python -m pip install --upgrade pip
  #       pip install flake8 pytest
  #       if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
  #   - name: Lint with flake8
  #     run: |
  #       # stop the build if there are Python syntax errors or undefined names
  #       flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
  #       # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
  #       flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
  #   - name: Test with pytest
  #     run: |
  #       pytest
  # test:

  #   runs-on: ubuntu-latest

  #   steps:
  #   - uses: actions/checkout@v4
  #   - name: Set up Python 3.10
  #     uses: actions/setup-python@v3
  #     with:
  #       python-version: "3.10"
  #   - name: Install dependencies
  #     run: |
  #       python -m pip install --upgrade pip
  #       pip install flake8 pytest
  #       if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
  #   - name: Test with pytest
  #     run: |
  #       pytest