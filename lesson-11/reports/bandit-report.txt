Run started:2025-08-17 16:50:49.923513
Files in scope (2):
	./app.py (score: {SEVERITY: 59, CONFIDENCE: 71})
	./test_app.py (score: {SEVERITY: 0, CONFIDENCE: 0})
Files excluded (13):
	./.bandit
	./.github/workflows/devsecops.yml
	./.zap/rules.tsv
	./DEMO_README.md
	./Dockerfile
	./Makefile
	./README.md
	./reports/bandit-report.json
	./reports/bandit-report.txt
	./requirements.txt
	./run_dast.sh
	./run_sast.sh
	./users.db

Test results:
>> Issue: [B404:blacklist] Consider possible security implications associated with the subprocess module.
   Severity: Low   Confidence: High
   CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
   More Info: https://bandit.readthedocs.io/en/1.8.6/blacklists/blacklist_imports.html#b404-import-subprocess
   Location: ./app.py:10:0
9	import sqlite3
10	import subprocess
11	import pickle

--------------------------------------------------
>> Issue: [B403:blacklist] Consider possible security implications associated with pickle module.
   Severity: Low   Confidence: High
   CWE: CWE-502 (https://cwe.mitre.org/data/definitions/502.html)
   More Info: https://bandit.readthedocs.io/en/1.8.6/blacklists/blacklist_imports.html#b403-import-pickle
   Location: ./app.py:11:0
10	import subprocess
11	import pickle
12	import hashlib

--------------------------------------------------
>> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'super_secret_hardcoded_key_123'
   Severity: Low   Confidence: Medium
   CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
   More Info: https://bandit.readthedocs.io/en/1.8.6/plugins/b105_hardcoded_password_string.html
   Location: ./app.py:19:17
18	# Intentional vulnerability: Hardcoded secret key (SAST will catch this)
19	app.secret_key = "super_secret_hardcoded_key_123"
20	

--------------------------------------------------
>> Issue: [B608:hardcoded_sql_expressions] Possible SQL injection vector through string-based query construction.
   Severity: Medium   Confidence: Low
   CWE: CWE-89 (https://cwe.mitre.org/data/definitions/89.html)
   More Info: https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html
   Location: ./app.py:66:14
65	    # Vulnerable SQL query - direct string concatenation
66	    query = f"SELECT * FROM users WHERE id = {user_id}" if user_id else "SELECT * FROM users"
67	    

--------------------------------------------------
>> Issue: [B608:hardcoded_sql_expressions] Possible SQL injection vector through string-based query construction.
   Severity: Medium   Confidence: Low
   CWE: CWE-89 (https://cwe.mitre.org/data/definitions/89.html)
   More Info: https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html
   Location: ./app.py:87:14
86	    # Vulnerable SQL query - SQL injection possible
87	    query = f"SELECT * FROM users WHERE username = '{username}' AND password = '{password}'"
88	    

--------------------------------------------------
>> Issue: [B602:subprocess_popen_with_shell_equals_true] subprocess call with shell=True identified, security issue.
   Severity: High   Confidence: High
   CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
   More Info: https://bandit.readthedocs.io/en/1.8.6/plugins/b602_subprocess_popen_with_shell_equals_true.html
   Location: ./app.py:130:17
129	        # Vulnerable command execution - command injection possible
130	        result = subprocess.run(command, shell=True, capture_output=True, text=True)
131	        return jsonify({

--------------------------------------------------
>> Issue: [B301:blacklist] Pickle and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue.
   Severity: Medium   Confidence: High
   CWE: CWE-502 (https://cwe.mitre.org/data/definitions/502.html)
   More Info: https://bandit.readthedocs.io/en/1.8.6/blacklists/blacklist_calls.html#b301-pickle
   Location: ./app.py:146:14
145	        # Vulnerable deserialization - arbitrary code execution possible
146	        obj = pickle.loads(data)
147	        return jsonify({"message": "Deserialized successfully", "data": str(obj)})

--------------------------------------------------
>> Issue: [B324:hashlib] Use of weak MD5 hash for security. Consider usedforsecurity=False
   Severity: High   Confidence: High
   CWE: CWE-327 (https://cwe.mitre.org/data/definitions/327.html)
   More Info: https://bandit.readthedocs.io/en/1.8.6/plugins/b324_hashlib.html
   Location: ./app.py:161:15
160	    # Vulnerable hash function - MD5 is cryptographically broken
161	    md5_hash = hashlib.md5(text.encode()).hexdigest()
162	    

--------------------------------------------------
>> Issue: [B201:flask_debug_true] A Flask app appears to be run with debug=True, which exposes the Werkzeug debugger and allows the execution of arbitrary code.
   Severity: High   Confidence: Medium
   CWE: CWE-94 (https://cwe.mitre.org/data/definitions/94.html)
   More Info: https://bandit.readthedocs.io/en/1.8.6/plugins/b201_flask_debug_true.html
   Location: ./app.py:199:4
198	    # Intentional vulnerability: Debug mode enabled in production
199	    app.run(host='0.0.0.0', port=5000, debug=True)

--------------------------------------------------
>> Issue: [B104:hardcoded_bind_all_interfaces] Possible binding to all interfaces.
   Severity: Medium   Confidence: Medium
   CWE: CWE-605 (https://cwe.mitre.org/data/definitions/605.html)
   More Info: https://bandit.readthedocs.io/en/1.8.6/plugins/b104_hardcoded_bind_all_interfaces.html
   Location: ./app.py:199:17
198	    # Intentional vulnerability: Debug mode enabled in production
199	    app.run(host='0.0.0.0', port=5000, debug=True)

--------------------------------------------------

Code scanned:
	Total lines of code: 207
	Total lines skipped (#nosec): 0
	Total potential issues skipped due to specifically being disabled (e.g., #nosec BXXX): 0

Run metrics:
	Total issues (by severity):
		Undefined: 0
		Low: 3
		Medium: 4
		High: 3
	Total issues (by confidence):
		Undefined: 0
		Low: 2
		Medium: 3
		High: 5
Files skipped (0):
