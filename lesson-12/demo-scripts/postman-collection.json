{
  "info": {
    "name": "DevOps API Testing Demo",
    "description": "Demo kolekce pro API testing kurz",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "https://jsonplaceholder.typicode.com",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Users",
      "item": [
        {
          "name": "Get All Users",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response time is less than 1000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "pm.test('Response is JSON array', function () {",
                  "    pm.response.to.be.json;",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.be.an('array');",
                  "    pm.expect(responseJson.length).to.be.greaterThan(0);",
                  "});",
                  "",
                  "pm.test('Users have required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const firstUser = responseJson[0];",
                  "    ",
                  "    pm.expect(firstUser).to.have.property('id');",
                  "    pm.expect(firstUser).to.have.property('name');",
                  "    pm.expect(firstUser).to.have.property('email');",
                  "    pm.expect(firstUser).to.have.property('address');",
                  "    ",
                  "    // Store first user ID for other tests",
                  "    pm.environment.set('userId', firstUser.id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users",
              "host": ["{{baseUrl}}"],
              "path": ["users"]
            }
          }
        },
        {
          "name": "Get Single User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('User has correct ID', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const expectedId = parseInt(pm.environment.get('userId'));",
                  "    pm.expect(responseJson.id).to.eql(expectedId);",
                  "});",
                  "",
                  "pm.test('User has valid email format', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["users", "{{userId}}"]
            }
          }
        },
        {
          "name": "Create New User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Created user has ID', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('id');",
                  "    pm.environment.set('newUserId', responseJson.id);",
                  "});",
                  "",
                  "pm.test('Created user has correct data', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.name).to.eql('John Doe');",
                  "    pm.expect(responseJson.email).to.eql('john.doe@example.com');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"John Doe\",\n  \"username\": \"johndoe\",\n  \"email\": \"john.doe@example.com\",\n  \"address\": {\n    \"street\": \"123 Main St\",\n    \"city\": \"Anytown\",\n    \"zipcode\": \"12345\"\n  },\n  \"phone\": \"555-1234\",\n  \"website\": \"johndoe.com\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users",
              "host": ["{{baseUrl}}"],
              "path": ["users"]
            }
          }
        },
        {
          "name": "Update User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Updated user has correct data', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.name).to.eql('Jane Doe Updated');",
                  "    pm.expect(responseJson.email).to.eql('jane.updated@example.com');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"id\": {{userId}},\n  \"name\": \"Jane Doe Updated\",\n  \"username\": \"janedoe\",\n  \"email\": \"jane.updated@example.com\",\n  \"address\": {\n    \"street\": \"456 Oak Ave\",\n    \"city\": \"Updated City\",\n    \"zipcode\": \"54321\"\n  },\n  \"phone\": \"555-5678\",\n  \"website\": \"janedoe.com\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["users", "{{userId}}"]
            }
          }
        },
        {
          "name": "Delete User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["users", "{{userId}}"]
            }
          }
        }
      ]
    },
    {
      "name": "Posts",
      "item": [
        {
          "name": "Get All Posts",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Posts array is not empty', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.be.an('array');",
                  "    pm.expect(responseJson.length).to.be.greaterThan(0);",
                  "});",
                  "",
                  "pm.test('Posts have required structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const firstPost = responseJson[0];",
                  "    ",
                  "    pm.expect(firstPost).to.have.property('id');",
                  "    pm.expect(firstPost).to.have.property('userId');",
                  "    pm.expect(firstPost).to.have.property('title');",
                  "    pm.expect(firstPost).to.have.property('body');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/posts",
              "host": ["{{baseUrl}}"],
              "path": ["posts"]
            }
          }
        },
        {
          "name": "Get Posts by User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('All posts belong to specified user', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const expectedUserId = parseInt(pm.environment.get('userId'));",
                  "    ",
                  "    responseJson.forEach(function(post) {",
                  "        pm.expect(post.userId).to.eql(expectedUserId);",
                  "    });",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/posts?userId={{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["posts"],
              "query": [
                {
                  "key": "userId",
                  "value": "{{userId}}"
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Error Handling",
      "item": [
        {
          "name": "Get Non-existent User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Response is empty object', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(Object.keys(responseJson).length).to.eql(0);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/999",
              "host": ["{{baseUrl}}"],
              "path": ["users", "999"]
            }
          }
        }
      ]
    }
  ]
}
